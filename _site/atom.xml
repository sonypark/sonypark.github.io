<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>SONY_DEV</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <link href="http://localhost:4000/"/>
 <updated>2019-01-31T18:19:07+09:00</updated>
 <id>http://localhost:4000</id>
 <author>
   <name>sonypark</name>
   <email></email>
 </author>

 
 <entry>
   <title>TIL_190131</title>
   <link href="http://localhost:4000/til/2019/01/31/TIL/"/>
   <updated>2019-01-31T00:00:00+09:00</updated>
   <id>http://localhost:4000/til/2019/01/31/TIL</id>
   <content type="html">&lt;h1 id=&quot;오늘-한-일&quot;&gt;오늘 한 일&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;알고리즘 문제풀이: &lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;barcode=9788966263080&amp;amp;orderClick=JAj&quot;&gt;코딩인터뷰완전분석&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;배열과 문자열&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;1.1 중복이 없는가&lt;/li&gt;
      &lt;li&gt;1.2 순열 확인&lt;/li&gt;
      &lt;li&gt;1.3 URL화&lt;/li&gt;
      &lt;li&gt;1.4 회문 순열&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;영어공부: 생활 영어 표현 5개 암기 및 작문&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;느낀점&quot;&gt;느낀점&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;어제 밤부터 컨디션이 너무 안 좋았다. 뒷목과 어깨가 뻐근하고 어지럼증이 심했다. 속도 안 좋아 밤잠을 설쳤다. 새벽에도 몇 번씩 깼다.&lt;/li&gt;
  &lt;li&gt;아침에 일어나니 많이 나아졌지만 목과 어깨가 여전히 굳어있었다. 한의원에 가서 침을 맞고 왔다.&lt;/li&gt;
  &lt;li&gt;아무래도 매일 앉아서 노트북을 하는 시간이 많다보니 목에 무리가 온 것 같다. 노트북 화면의 위치가 낮다보니 거북목이 되는 등 자세 흐트러짐이 심하다&lt;/li&gt;
  &lt;li&gt;고민끝에 노트북 거치대를 주문했다. 하루 중 대부분의 시간을 컴퓨터 앞에 앉아 보내는데 이제는 자세도 신경을 써야겠다.&lt;/li&gt;
  &lt;li&gt;몸이 아프면 정말 아무것도 못한다. 건강 관리도 실력이다. 스트레칭과 자세 교정도 틈틈이 하자.&lt;/li&gt;
  &lt;li&gt;알고리즘 책을 보며 공부하고 있는데 재미있다. 특히 예전에 풀었던 문제풀이 방식을 응용하여 풀었을 때 기분이 좋다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;내일-할-일&quot;&gt;내일 할 일&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;영어공부: 생활 영어 표현 5개 암기 및 작문&lt;/li&gt;
  &lt;li&gt;알고리즘 공부&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>TIL_190130</title>
   <link href="http://localhost:4000/til/2019/01/30/TIL/"/>
   <updated>2019-01-30T00:00:00+09:00</updated>
   <id>http://localhost:4000/til/2019/01/30/TIL</id>
   <content type="html">&lt;h1 id=&quot;오늘-한-일&quot;&gt;오늘 한 일&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;알고리즘 문제풀이
    &lt;ul&gt;
      &lt;li&gt;Lv1 - 소수 찾기&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;영어공부: 생활 영어 표현 5개 암기 및 작문&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;느낀점&quot;&gt;느낀점&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;알고리즘 문제 하나 푸는데 2시간이 걸렸다. 힌트를 보지 않고 최대한 혼자서 풀었다. 다른 사람의 풀이를 보니 간단하지만 이해가 안 되는 부분이 많아 다시 공부해야겠다.&lt;/li&gt;
  &lt;li&gt;하루 하나씩 간단한 알고리즘 문제를 푸는 것은 좋은 것 같다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;내일-할-일&quot;&gt;내일 할 일&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;영어공부: 생활 영어 표현 5개 암기 및 작문&lt;/li&gt;
  &lt;li&gt;패스트캠퍼스 파이썬 강의(6회차)&lt;/li&gt;
  &lt;li&gt;알고리즘 공부&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Lv1 - 최대공약수 최소공배수</title>
   <link href="http://localhost:4000/algorithm%20test/2019/01/30/AT-gcdlcm/"/>
   <updated>2019-01-30T00:00:00+09:00</updated>
   <id>http://localhost:4000/algorithm%20test/2019/01/30/AT-gcdlcm</id>
   <content type="html">&lt;blockquote&gt;
  &lt;p&gt;출처: https://programmers.co.kr/learn/courses/30/lessons/12940&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;문제&quot;&gt;문제&lt;/h2&gt;
&lt;p&gt;두 수를 입력받아 두 수의 최대공약수와 최소공배수를 반환하는 함수, solution을 완성해 보세요. 
배열의 맨 앞에 최대공약수, 그다음 최소공배수를 넣어 반환하면 됩니다. 
예를 들어 두 수 3, 12의 최대공약수는 3, 최소공배수는 12이므로 solution(3, 12)는 [3, 12]를 반환해야 합니다.&lt;/p&gt;

&lt;h4 id=&quot;제한사항&quot;&gt;제한사항&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;두 수는 1이상 1000000이하의 자연수입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;풀이&quot;&gt;풀이&lt;/h2&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# 방법1
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;gcdlcm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;range_num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 둘 중 작은 수 까지의 범위만 구하면 된다.
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;range_num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# [G, L], 최대공약수, 최소공배수
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;다른-사람-풀이&quot;&gt;다른 사람 풀이&lt;/h2&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;# 방법2 (유클리드 호제법)
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'''
a를 b로 나눈 나머지가 r이라고 하자(a&amp;gt;=b, 0&amp;lt;=r&amp;lt;b)
a와b의 최대공약를 (a,b)라고 하면 다음이 성립한다.
(a,b) = (b,r)

ex) (1071,1029) = (1029,42) = (42,21) = (21,0) = 21
'''&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;gcdlcm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;remainder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remainder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remainder&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;remainder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;배운점&quot;&gt;배운점&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;a,b의 최소공배수 = a*b/G (G = a,b의 최대공약수)&lt;/li&gt;
  &lt;li&gt;유클리드 호제법으로 최대공약수를 빠르고 효율적으로 구하는 법을 알게되었다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;느낀점&quot;&gt;느낀점&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;다른 사람의 풀이를 보며 좀 더 효율적인 방법을 알아가는 재미가 있다.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>유클리드 호제법(Euclidean algorithm)</title>
   <link href="http://localhost:4000/algorithm%20test/2019/01/30/AT-Euclidean-algorithm/"/>
   <updated>2019-01-30T00:00:00+09:00</updated>
   <id>http://localhost:4000/algorithm%20test/2019/01/30/AT-Euclidean algorithm</id>
   <content type="html">&lt;blockquote&gt;
  &lt;p&gt;출처: &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EC%9C%A0%ED%81%B4%EB%A6%AC%EB%93%9C_%ED%98%B8%EC%A0%9C%EB%B2%95#%EC%A0%95%EC%88%98%EC%9D%98_%EA%B2%BD%EC%9A%B0&quot;&gt;위키피디아&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;정의&quot;&gt;정의&lt;/h2&gt;
&lt;p&gt;2개의 자연수(또는 정식) a, b에 대해서 a를 b로 나눈 나머지를 r이라 하면(단, a&amp;gt;b), a와 b의 최대공약수는 b와 r의 최대공약수와 같다.&lt;/p&gt;

&lt;h4 id=&quot;정리&quot;&gt;정리&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;a를 b로 나눈 나머지 = r (a&amp;gt;=b, 0&amp;lt;=r&amp;lt;b)&lt;/li&gt;
  &lt;li&gt;a,b의 최대공약를 (a,b)라고 하면 다음이 성립한다.&lt;/li&gt;
  &lt;li&gt;(a,b) = (b,r)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(1071,1029) = (1029,42) = (42,21) = (21,0) = 21

1071 = 1029 * 1 + 42
1029 = 42 *24 + 21
42 = 21 * 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>TIL_190129</title>
   <link href="http://localhost:4000/til/2019/01/29/TIL/"/>
   <updated>2019-01-29T00:00:00+09:00</updated>
   <id>http://localhost:4000/til/2019/01/29/TIL</id>
   <content type="html">&lt;h1 id=&quot;오늘-한-일&quot;&gt;오늘 한 일&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://dojang.io/course/view.php?id=7&quot;&gt;파이썬코딩도장&lt;/a&gt; part 3 공부&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;코루틴&lt;/li&gt;
      &lt;li&gt;데코레이터&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;알고리즘 문제풀이
    &lt;ul&gt;
      &lt;li&gt;Lv1 - 평균 구하기&lt;/li&gt;
      &lt;li&gt;Lv1 - 최대공약수와 최소공배수&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;영어공부: 생활 영어 표현 5개 암기 및 작문&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;느낀점&quot;&gt;느낀점&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;예전에 잠깐 일했던 곳에서 연락이 왔다. 정말 좋은 기회이지만 내가 공부하는 방향과는 달라서 고사했다. 그만큼 지금 공부하는 것에 확신이 있고 간절하다. 오늘 연락을 받고 나니 지금의 시간이 더 소중해졌다. 한 시간 한 시간을 허투루 쓰지 말고 내가 원하는 것에 집중하자.&lt;/li&gt;
  &lt;li&gt;비전공자로서 예전과는 전혀 다른 공부를 하고 있지만 나는 지금하는 공부가 좋고 재미있다. 내가 틀리지 않았다는 걸 증명해내자.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;내일-할-일&quot;&gt;내일 할 일&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;영어공부: 생활 영어 표현 5개 암기 및 작문&lt;/li&gt;
  &lt;li&gt;알고리즘 공부&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>TIL_190128</title>
   <link href="http://localhost:4000/til/2019/01/28/TIL/"/>
   <updated>2019-01-28T00:00:00+09:00</updated>
   <id>http://localhost:4000/til/2019/01/28/TIL</id>
   <content type="html">&lt;h1 id=&quot;오늘-한-일&quot;&gt;오늘 한 일&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://dojang.io/course/view.php?id=7&quot;&gt;파이썬코딩도장&lt;/a&gt; part 3 공부
    &lt;ul&gt;
      &lt;li&gt;두 점 사이의 거리&lt;/li&gt;
      &lt;li&gt;예외 처리&lt;/li&gt;
      &lt;li&gt;이터레이터 사용하기&lt;/li&gt;
      &lt;li&gt;제너레이터 사용하기&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;알고리즘 문제풀이
    &lt;ul&gt;
      &lt;li&gt;Lv1 - 짝수와훌수&lt;/li&gt;
      &lt;li&gt;Lv1 - 가운데문자출력&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;영어공부: 생활 영어 표현 5개 암기 및 작문&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;느낀점&quot;&gt;느낀점&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;세상에서 가장 어려운게 꾸준히 하는 것 같다. 작심삼일이라는 말이 괜히 나온 게 아니다. 통계적으로 대부분 3일을 못 가기 때문이다. 무엇이든 꾸준히만 지속하면 못 할 수가 없다.&lt;/li&gt;
  &lt;li&gt;매일 TIL을 하기로 스스로 다짐하고도 벌써 세 번째 공백이 생겼다. 반성하자.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;내일-할-일&quot;&gt;내일 할 일&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;영어공부: 생활 영어 표현 5개 암기 및 작문&lt;/li&gt;
  &lt;li&gt;알고리즘 공부&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dojang.io/course/view.php?id=7&quot;&gt;파이썬코딩도장&lt;/a&gt; part 3 공부&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>TIL_190127</title>
   <link href="http://localhost:4000/til/2019/01/27/TIL/"/>
   <updated>2019-01-27T00:00:00+09:00</updated>
   <id>http://localhost:4000/til/2019/01/27/TIL</id>
   <content type="html">&lt;h1 id=&quot;오늘-한-일&quot;&gt;오늘 한 일&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://dojang.io/course/view.php?id=7&quot;&gt;파이썬코딩도장&lt;/a&gt; part 3 공부
    &lt;ul&gt;
      &lt;li&gt;클래스 사용하기&lt;/li&gt;
      &lt;li&gt;클래스 속성, static method, class method&lt;/li&gt;
      &lt;li&gt;클래스 상속&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;영어공부: 생활 영어 표현 5개 암기 및 작문&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;내일-할-일&quot;&gt;내일 할 일&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;영어공부: 생활 영어 표현 5개 암기 및 작문&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dojang.io/course/view.php?id=7&quot;&gt;파이썬코딩도장&lt;/a&gt; part 3 공부&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>TIL_190126</title>
   <link href="http://localhost:4000/til/2019/01/26/TIL/"/>
   <updated>2019-01-26T00:00:00+09:00</updated>
   <id>http://localhost:4000/til/2019/01/26/TIL</id>
   <content type="html">&lt;h1 id=&quot;오늘-한-일&quot;&gt;오늘 한 일&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;패스트캠퍼스 파이썬 4회차 수업&lt;/li&gt;
  &lt;li&gt;알고리즘 스터디&lt;/li&gt;
  &lt;li&gt;영어공부: 생활 영어 표현 5개 암기 및 작문&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;느낀점&quot;&gt;느낀점&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;친구들과 같이 자료구조와 알고리즘 스터디를 시작했다. 교재는 &lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;barcode=9788966263080&amp;amp;orderClick=JAj&quot;&gt;코딩인터뷰완전분석&lt;/a&gt;으로 공부하려 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;내일-할-일&quot;&gt;내일 할 일&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;영어공부: 생활 영어 표현 5개 암기 및 작문&lt;/li&gt;
  &lt;li&gt;패스트캠퍼스 수업 복습&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dojang.io/course/view.php?id=7&quot;&gt;파이썬코딩도장&lt;/a&gt; part 3 공부&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>TIL_190125</title>
   <link href="http://localhost:4000/til/2019/01/25/TIL/"/>
   <updated>2019-01-25T00:00:00+09:00</updated>
   <id>http://localhost:4000/til/2019/01/25/TIL</id>
   <content type="html">&lt;h1 id=&quot;오늘-한-일&quot;&gt;오늘 한 일&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;영어공부: 생활 영어 표현 5개 암기 및 작문&lt;/li&gt;
  &lt;li&gt;운동 1시간&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;느낀점&quot;&gt;느낀점&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;다시 운동을 시작했다. 장기간 공부하려면 체력이 필수다. 운동도 꾸준히하자&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;내일-할-일&quot;&gt;내일 할 일&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;영어공부: 생활 영어 표현 5개 암기 및 작문&lt;/li&gt;
  &lt;li&gt;패스트캠퍼스 수업&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dojang.io/course/view.php?id=7&quot;&gt;파이썬코딩도장&lt;/a&gt; part 3 공부&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>TIL_190124</title>
   <link href="http://localhost:4000/til/2019/01/24/TIL/"/>
   <updated>2019-01-24T00:00:00+09:00</updated>
   <id>http://localhost:4000/til/2019/01/24/TIL</id>
   <content type="html">&lt;h1 id=&quot;오늘-한-일&quot;&gt;오늘 한 일&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://dojang.io/course/view.php?id=7&quot;&gt;파이썬코딩도장&lt;/a&gt; part 2 공부
    &lt;ul&gt;
      &lt;li&gt;람다 함수&lt;/li&gt;
      &lt;li&gt;클로저&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;알고리즘 문제풀이: &lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/42576&quot;&gt;Lv1_완주하지못한선수&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;패스트캠퍼스 파이썬 4회차 수업&lt;/li&gt;
  &lt;li&gt;영어공부: 생활 영어 표현 5개 암기 및 작문&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;느낀점&quot;&gt;느낀점&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://dojang.io/course/view.php?id=7&quot;&gt;파이썬코딩도장&lt;/a&gt; part 2를 완료했다. 책이 꽤 두꺼워서 완독하는데 시간이 좀 걸리지만 그래도 배우는 게 많다.&lt;/li&gt;
  &lt;li&gt;처음으로 알고리즘 문제를 풀어봤다. 가장 쉬운 문제를 푸는데도 시간이 오래 걸렸다.(대략 1시간 반 정도). 다른 사람의 풀이를 보면서 정말 많이 배운다. 내가 전혀 생각하지 못 한 방식으로 더 간결하게 풀이한 코드를 보면서 더 겸손해지고 자극을 받는다.&lt;/li&gt;
  &lt;li&gt;앞으로 꾸준히 알고리즘 문제를 풀 생각이다. 아직 알고리즘 문제풀이에 익숙지 않지만 많이 풀다 보면 익숙해질 날이 올 것이라 생각한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;내일-할-일&quot;&gt;내일 할 일&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;영어공부: 생활 영어 표현 5개 암기 및 작문&lt;/li&gt;
  &lt;li&gt;패스트캠퍼스 수업&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dojang.io/course/view.php?id=7&quot;&gt;파이썬코딩도장&lt;/a&gt; part 3 공부&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Lv1 - 완주하지 못한 선수 (Python)</title>
   <link href="http://localhost:4000/algorithm%20test/2019/01/24/AT-list-comparison/"/>
   <updated>2019-01-24T00:00:00+09:00</updated>
   <id>http://localhost:4000/algorithm%20test/2019/01/24/AT-list comparison</id>
   <content type="html">&lt;blockquote&gt;
  &lt;p&gt;출처: https://programmers.co.kr/learn/courses/30/lessons/42576&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;문제&quot;&gt;문제&lt;/h2&gt;
&lt;p&gt;수 많은 마라톤 선수들이 마라톤에 참여하였습니다. 단 한 명의 선수를 제외하고는 모든 선수가 마라톤을 완주하였습니다.
마라톤에 참여한 선수들의 이름이 담긴 배열 participant와 완주한 선수들의 이름이 담긴 배열 completion이 주어질 때, 완주하지 못한 선수의 이름을 return 하도록 solution 함수를 작성해주세요.&lt;/p&gt;

&lt;h4 id=&quot;제한사항&quot;&gt;제한사항&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;마라톤 경기에 참여한 선수의 수는 1명 이상 100,000명 이하입니다.&lt;/li&gt;
  &lt;li&gt;completion의 길이는 participant의 길이보다 1 작습니다.&lt;/li&gt;
  &lt;li&gt;참가자의 이름은 1개 이상 20개 이하의 알파벳 소문자로 이루어져 있습니다.&lt;/li&gt;
  &lt;li&gt;참가자 중에는 동명이인이 있을 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;예시&quot;&gt;예시&lt;/h4&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;participant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mislav&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stanko&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mislav&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ana&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stanko&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ana&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mislav&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mislav&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# mislav는 동명이인, 완주자 명단에는 한 명밖에 없기 때문에 한 명은 완주하지 못함.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;풀이&quot;&gt;풀이&lt;/h2&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;participant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 이름을 오름차순으로 정렬
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;participant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# 동명이인 중에 완주 못한 사람 체크
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;participant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# 동명이인이고 완주를 하지 못했으나 이름 상 제일 뒤에 있는 사람인 경우 체크
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# 예시) 정렬된 후의 변수가 
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# participant['a', 'b', 'b', 'z', 'z'], completion['a', 'b', 'b', 'z'] 인 경우
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;participant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;다른-사람-풀이&quot;&gt;다른 사람 풀이&lt;/h2&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;collections&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;participant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;participant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;배운점&quot;&gt;배운점&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;다른 사람의 풀이를 보고 Counter 함수에 대해 알게 되었다.&lt;/li&gt;
  &lt;li&gt;Counter 함수는 리스트 안의 객체를 key값으로 객체의 갯수를 value값으로 해서 컨테이너로 만들어준다.&lt;/li&gt;
  &lt;li&gt;Counter 객체는 서로 더하기 빼기가 가능하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;느낀점&quot;&gt;느낀점&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;처음으로 알고리즘 문제를 풀어봤다.&lt;/li&gt;
  &lt;li&gt;가장 쉬운 단계임에도 푸는데 시간이 꽤 걸렸다.&lt;/li&gt;
  &lt;li&gt;다른 사람의 문제풀이를 보며 많이 배웠다.&lt;/li&gt;
  &lt;li&gt;파이썬의 간결함에 놀랐다. (아는 만큼 보인다.)&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>TIL_190123</title>
   <link href="http://localhost:4000/til/2019/01/23/TIL/"/>
   <updated>2019-01-23T00:00:00+09:00</updated>
   <id>http://localhost:4000/til/2019/01/23/TIL</id>
   <content type="html">&lt;h1 id=&quot;오늘-한-일&quot;&gt;오늘 한 일&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://dojang.io/course/view.php?id=7&quot;&gt;파이썬코딩도장&lt;/a&gt; part 2 공부
    &lt;ul&gt;
      &lt;li&gt;세트(set) 사용하기&lt;/li&gt;
      &lt;li&gt;파일 사용하기&lt;/li&gt;
      &lt;li&gt;회문 판별과 N-gram 만들기&lt;/li&gt;
      &lt;li&gt;함수 사용하기&lt;/li&gt;
      &lt;li&gt;함수에서 위치 인수와 키워드 인수 사용하기&lt;/li&gt;
      &lt;li&gt;재귀함수&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;영어공부: 생활 영어 표현 5개 암기 및 작문&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;느낀점&quot;&gt;느낀점&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;내일이면 - &lt;a href=&quot;https://dojang.io/course/view.php?id=7&quot;&gt;파이썬코딩도장&lt;/a&gt; part 2가 끝나고 part 3로 들어갈 거 같다. 이번 주 안으로 완독하는 것을 목표로 하자.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;내일-할-일&quot;&gt;내일 할 일&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;영어공부: 생활 영어 표현 5개 암기 및 작문&lt;/li&gt;
  &lt;li&gt;패스트캠퍼스 수업&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dojang.io/course/view.php?id=7&quot;&gt;파이썬코딩도장&lt;/a&gt; part 2 공부&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>TIL_190122</title>
   <link href="http://localhost:4000/til/2019/01/22/TIL/"/>
   <updated>2019-01-22T00:00:00+09:00</updated>
   <id>http://localhost:4000/til/2019/01/22/TIL</id>
   <content type="html">&lt;h1 id=&quot;오늘-한-일&quot;&gt;오늘 한 일&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;영어공부: 생활 영어 표현 5개 암기 및 작문&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;느낀점&quot;&gt;느낀점&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;오늘은 집안일을 도울 게 있어서 개발 공부에 시간을 많이 쏟지 못했다. 그래도 필요할 때 도움이 될 수 있어 뿌듯했다.&lt;/li&gt;
  &lt;li&gt;내일부터 다시 공부 시작이다 :)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;내일-할-일&quot;&gt;내일 할 일&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;영어공부: 생활 영어 표현 5개 암기 및 작문&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dojang.io/course/view.php?id=7&quot;&gt;파이썬코딩도장&lt;/a&gt; part 2 공부&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>TIL_190121</title>
   <link href="http://localhost:4000/til/2019/01/21/TIL/"/>
   <updated>2019-01-21T00:00:00+09:00</updated>
   <id>http://localhost:4000/til/2019/01/21/TIL</id>
   <content type="html">&lt;h1 id=&quot;오늘-한-일&quot;&gt;오늘 한 일&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;패스트캠퍼스 파이썬 중급 강의 세 번째 수업 정리 및 복습&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/sonypark/25b5be822b6c0772d7ac0470eedee4ef&quot;&gt;gist.github.com&lt;/a&gt;에 업로드
    &lt;ul&gt;
      &lt;li&gt;1급객체 함수&lt;/li&gt;
      &lt;li&gt;재귀호출&lt;/li&gt;
      &lt;li&gt;멀티플 디스패치 처리&lt;/li&gt;
      &lt;li&gt;함수형 처리 함수&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dojang.io/course/view.php?id=7&quot;&gt;파이썬코딩도장&lt;/a&gt; part 2 공부
    &lt;ul&gt;
      &lt;li&gt;문자열 응용하기&lt;/li&gt;
      &lt;li&gt;딕셔너리 응용하기&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;영어공부: 생활 영어 표현 5개 암기 및 작문&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;느낀점&quot;&gt;느낀점&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;하용호님이 공유해주신 &lt;a href=&quot;https://drive.google.com/file/d/1uQ5VOXBNk_Nf6V5JUXhKl2pHZY5N1wA4/view?usp=drive_open&quot;&gt;발표의 정석&lt;/a&gt;을 보고 큰 감명을 받았다.&lt;/li&gt;
  &lt;li&gt;평소에 &lt;a href=&quot;https://www.slideshare.net/yongho?utm_campaign=profiletracking&amp;amp;utm_medium=sssite&amp;amp;utm_source=ssslideview&quot;&gt;하용호님의 SlideShare&lt;/a&gt;에서 ppt를 보고 이 분 설명 참 잘 하신다라고 느꼈다. 하용호님의 ppt를 보고 있으면 눈 앞에서 발표를 듣고 있는 느낌이다. 글자가 아닌 음성이 들린다. ppt만 봐도 이 정도인데 실제로 발표를 들으면 얼마나 재미있을까라는 생각이 든다.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://drive.google.com/file/d/1uQ5VOXBNk_Nf6V5JUXhKl2pHZY5N1wA4/view?usp=drive_open&quot;&gt;발표의 정석&lt;/a&gt;에는 발표를 잘하면 무엇이 좋은지, 어떻게 하면 발표를 잘 할 수 있는지에 대한 하용호님의 경험과 노하우가 고스란히 들어있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;-발표의-정석-내용-중-&quot;&gt;– &lt;a href=&quot;https://drive.google.com/file/d/1uQ5VOXBNk_Nf6V5JUXhKl2pHZY5N1wA4/view?usp=drive_open&quot;&gt;발표의 정석&lt;/a&gt; 내용 중 –&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;나비가 아니라면 꽃이 되면 된다.

발표는 꽃이 되는 방법. 그러면 기회가 내게로 온다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;발표는-성장과-기회를-가져다-준다&quot;&gt;발표는 &lt;code class=&quot;highlighter-rouge&quot;&gt;성장&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;기회&lt;/code&gt;를 가져다 준다.&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;성장&lt;/strong&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;머릿속에 파편화 되어있던 지식을 정말 나의 지식으로 만드는 시간&lt;/code&gt;&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;내 발표를 듣는 첫번째 청중은 나 자신이다. 내가 가장 많이 배운다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;기회&lt;/strong&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;내가 무엇을 알고 있고, 내가 무엇을 하고 있는지 알리는 시간&lt;/code&gt;&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;오늘 이 강의장에서의 누군가가 나중에 나에게 큰 기회를 가져다 준다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;내일-할-일&quot;&gt;내일 할 일&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;영어공부: 생활 영어 표현 5개 암기 및 작문&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dojang.io/course/view.php?id=7&quot;&gt;파이썬코딩도장&lt;/a&gt; part 2 공부&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>패스트캠퍼스_파이썬중급_02</title>
   <link href="http://localhost:4000/python/2019/01/20/py-fastcampus01/"/>
   <updated>2019-01-20T00:00:00+09:00</updated>
   <id>http://localhost:4000/python/2019/01/20/py-fastcampus01</id>
   <content type="html">&lt;noscript&gt;&lt;pre&gt;#  함수의 정의 및 호출
 - 함수 객체 이해하기
 - 함수 네임스페이스 및 스코프
 - 람다함수 이해하기
 
# 파이썬 함수의 장점
why 함수를 써야하는가
- 그냥 코드로 작성하는 것보다 빠르다(항상)

```python
N = 10000
```

```python
## 일반 코드(line by line)로 작성했을 때

%%time

result = 0
for i in range(1, N+1):
    result += i**2
```
```python
=&amp;gt; Wall time: 5.17 ms
```

```python
## 함수로 만들었을 떄
def cal(n):
    result = 0
    for i in range(1, n+1):
        result += i**2
    return result
```

```python
%%time
cal(N)

=&amp;gt; Wall time: 3.85 µs
```

스크립트 파일일때도 동일한 차이를 보이는지 확인하기 위해서 2종류의 파일을 생성

```python
%%writefile func1.py
#함수를 정의하지 않은 연산

import time

start_time = time.perf_counter() # 시작하는 시간 얻기 (float)

result = 0
for i in range(100000):
    result += i**2
    
end_time = time.perf_counter() # 끝난 시간 얻기 (float)

print(end_time - start_time) # (끝난 시간 - 시작한 시간 ) 차이로 걸린 시간 보기


=&amp;gt; Overwriting func1.py
```

```python
%%writefile func2.py
# 함수로 정의한 연산

import time

def cal(n):
    result = 0
    for i in range(1, n+1):
        result += i**2
    return result


start_time = time.perf_counter()

cal(100000)

end_time = time.perf_counter()

print(end_time - start_time)


=&amp;gt; Overwriting func2.py
```

```python
!python func1.py
=&amp;gt; 0.051213420999999995
```

```python
!python func2.py
=&amp;gt; 0.039568119
```

### 함수를 정의하면, 함수의 로직이 보다 빠른 바이너리화된 코드로 변환되어 저장됨


```python
def cal(n):
    result = 0
    for i in range(1, n+1):
        result += i**2
    return result
```

```python
cal = function(code, globals(), cal)
```

```python
# 코드객체가 저장된 스페셜 속성
cal.__code__

=&amp;gt; &amp;lt;code object cal at 0x1044e54b0, file &amp;quot;&amp;lt;ipython-input-269-bed2481b6e06&amp;gt;&amp;quot;, line 1&amp;gt;
```

# 함수 namespace

```python
CONST = 3


def outer(a):
    def inner(b):
        b += 2
        print(&amp;#39;inner&amp;#39;, locals())
        return b
    a += 1
    print(&amp;#39;outer&amp;#39;, locals())
    return inner(a) # &amp;lt;-- inner의 실행

```

```python
outer(9)
```
```python
outer {&amp;#39;a&amp;#39;: 10, &amp;#39;inner&amp;#39;: &amp;lt;function outer.&amp;lt;locals&amp;gt;.inner at 0x104463620&amp;gt;}
inner {&amp;#39;b&amp;#39;: 12}
12
```

### inner함수에서 outer함수의 변수를 참조하려고 할때

```python
CONST = &amp;#39;global&amp;#39;

def outer(a):
    def inner(b):
        b += 1
        print(CONST, a, b) # b는 in localname / a is not in localname
        return a, b
    return inner(a)
```
```python
outer(10)
```
```python
=&amp;gt; global 10 11
   (10, 11)
```

&amp;gt; inner에서 outer함수의 namespace 의 이름은 항상 참조 가능
---

### outer함수에서 inner함수안에 있는 변수를 참조하려고 할 때

```python
def outer(a):
    def inner(b):
        b += 1
        return b
    c = inner(a)
    print(b)
    return c

```
```python
outer(9)
```
```python
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
&amp;lt;ipython-input-30-8c3a9492d915&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 outer(9)

&amp;lt;ipython-input-29-1c94c554a418&amp;gt; in outer(a)
      4         return b
      5     c = inner(a)
----&amp;gt; 6     print(b)
      7     return c

NameError: name &amp;#39;b&amp;#39; is not defined
```
&amp;gt; outer에서 inner함수안에 이름은 참조 불가능
---

### inner에서 outer의 변수를 변경하려고 하면?


```python
def outer(a):
    def inner(b):
        a = 2
        return a + b
    c = inner(a)
    print(&amp;#39;print a&amp;#39;, a)
    return c
```
```python
outer(10)
```
```python
=&amp;gt; print a 10
   12
```
&amp;gt; inner안에서 변수 a를 새로 생성하는 것 (초기화)

---

### inner함수에서 outer함수안에 변수를 참조한 후 변경하려고 하면?

```python
def outer(a):
    def inner(b):
        print(a)
        a = 2
        return a + b
    return inner(a)
```
```python
outer(10)
```
```python
---------------------------------------------------------------------------
UnboundLocalError                         Traceback (most recent call last)
&amp;lt;ipython-input-55-77e72c7f0d1d&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 outer(10)

&amp;lt;ipython-input-54-274b40db2e80&amp;gt; in outer(a)
      4         a = 2
      5         return a + b
----&amp;gt; 6     return inner(a)

&amp;lt;ipython-input-54-274b40db2e80&amp;gt; in inner(b)
      1 def outer(a):
      2     def inner(b):
----&amp;gt; 3         print(a)
      4         a = 2
      5         return a + b

UnboundLocalError: local variable &amp;#39;a&amp;#39; referenced before assignment
```
&amp;gt; inner함수안에 이름 `a`를 생성하는(할당하는) 구문이 존재하기 때문에, 외부에 있는(global 또는 nonlocal) 이름을 참조할 수 없음.
---

참조만 하려는 경우

```python
import dis

def outer(a):
    def inner(b):
        print(a)
        return a + b
    dis.dis(inner)
    return inner(a)
```

```python
outer(10)
```

```
  3           0 LOAD_GLOBAL              0 (print)
              2 LOAD_DEREF               0 (a)
              4 CALL_FUNCTION            1
              6 POP_TOP

  4           8 LOAD_DEREF               0 (a)
             10 LOAD_FAST                0 (b)
             12 BINARY_ADD
             14 RETURN_VALUE
10
20
```
&amp;gt; 변수 `a`를 찾을 때 수행하는 작업 :  `LOAD_DEREF`

&amp;gt; 즉, 자유변수에서 찾고있음.

---

참조 후 변경하려는 경우

```python
def outer(a):
    def inner(b):
        print(a)
        a = 2
        return a + b
    dis.dis(inner)
    return inner(a)
```
```python
outer(10)
```
```
  3           0 LOAD_GLOBAL              0 (print)
              2 LOAD_FAST                1 (a)
              4 CALL_FUNCTION            1
              6 POP_TOP

  4           8 LOAD_CONST               1 (2)
             10 STORE_FAST               1 (a)

  5          12 LOAD_FAST                1 (a)
             14 LOAD_FAST                0 (b)
             16 BINARY_ADD
             18 RETURN_VALUE
```
```python
---------------------------------------------------------------------------
UnboundLocalError                         Traceback (most recent call last)
&amp;lt;ipython-input-75-77e72c7f0d1d&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 outer(10)

&amp;lt;ipython-input-74-cdc13810ae66&amp;gt; in outer(a)
      5         return a + b
      6     dis.dis(inner)
----&amp;gt; 7     return inner(a)

&amp;lt;ipython-input-74-cdc13810ae66&amp;gt; in inner(b)
      1 def outer(a):
      2     def inner(b):
----&amp;gt; 3         print(a)
      4         a = 2
      5         return a + b

UnboundLocalError: local variable &amp;#39;a&amp;#39; referenced before assignment
```

&amp;gt; 변수 `a`를 찾을 때 수행하는 작업 :  `LOAD_FAST`

&amp;gt; 로컬에서 찾고있음.

&amp;gt; 아직 로컬에서 할당되기 전이라서, 에러

---
#### nonlocal을 사용하는 경우

```python
def outer(a):
    def inner(b):
        nonlocal a
        print(a)
        a = 2
        return a + b
    dis.dis(inner)
    c = inner(a)
    print(&amp;#39;print a&amp;#39;, a)
    return c
```
```python
outer(10)
```
```
  4           0 LOAD_GLOBAL              0 (print)
              2 LOAD_DEREF               0 (a)
              4 CALL_FUNCTION            1
              6 POP_TOP

  5           8 LOAD_CONST               1 (2)
             10 STORE_DEREF              0 (a)

  6          12 LOAD_DEREF               0 (a)
             14 LOAD_FAST                0 (b)
             16 BINARY_ADD
             18 RETURN_VALUE
10
print a 2
12
```
&amp;gt; print로 변수 `a`를 참조후에 변경시켰지만, 에러가 발생하지 않음.

&amp;gt; 그리고 외부함수안 변수 `a`가 변경된걸 확인할 수 있음

---
### nonlocal 과 global 비교

```python
g = 10

def outer(a):
    def outer2(b):
        def outer3(c):
            def inner(d):
                nonlocal a
                a = 123
                #global g
                #g = 12
            inner(c)
        outer3(b)
    outer2(a)
    return a
```
```python
outer(12)
=&amp;gt; 123
```

### 함수안에서 참조 후 할당한 경우

```python
def a():
    print(a)
    a = 3
```
```python
a() # NameError가 발생하지 않음
```
```python
---------------------------------------------------------------------------
UnboundLocalError                         Traceback (most recent call last)
&amp;lt;ipython-input-352-c29124115998&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 a() # NameError가 발생하지 않음

&amp;lt;ipython-input-351-3764ae051a13&amp;gt; in a()
      1 def a():
----&amp;gt; 2     print(a)
      3     a = 3

UnboundLocalError: local variable &amp;#39;a&amp;#39; referenced before assignment
```
```python
def a():
    print(b)
```
```python
# 할당하지 않는 변수를 참조하는 경우에는 NameError 발생

a()
```
```python
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
&amp;lt;ipython-input-358-389f78108c11&amp;gt; in &amp;lt;module&amp;gt;
      1 # 할당하지 않는 변수를 참조하는 경우에는 NameError 발생
      2 
----&amp;gt; 3 a()

&amp;lt;ipython-input-356-ae73a013f075&amp;gt; in a()
      1 def a():
----&amp;gt; 2     print(b)

NameError: name &amp;#39;b&amp;#39; is not defined
```
----


# 파이썬 함수 호출 방식

call by value? call by reference?


call by value일까?

```python
def spam(eggs):
    eggs.append(1)
    eggs = [2, 3]
    
ham = [0]

spam(ham)
```
```python
=&amp;gt; [2, 3] in func
   [0, 1] out func
```
```python
ham
=&amp;gt; [0, 1]
```
만약 call by value라면..

```python
from copy import deepcopy

def spam(eggs):
    eggs = deepcopy(eggs)
    eggs.append(1)
    eggs = [2, 3]
    
ham = [0]

spam(ham)
```
```python
ham
=&amp;gt; [0]
```
call by reference일까?

```python
def spam(eggs):
    eggs.append(1)
    eggs = [2, 3]

    
ham = [0]

spam(ham)   
```
```python
ham
=&amp;gt; [0, 1]
```
call by ref 라면..
```python
def spam(eggs):
    eggs.append(1)
    eggs[:] = [2, 3]

ham = [0]

spam(ham)
```
```python
ham
=&amp;gt; [2, 3]
```

## 파이썬 call by sharing (call by objects)

```python
def spam(eggs):
    print(&amp;#39;2 - &amp;#39;, id(eggs))
    eggs.append(1)
    print(&amp;#39;3 - &amp;#39;,id(eggs))
    eggs = [2, 3]
    print(&amp;#39;4 - &amp;#39;,id(eggs))

    
ham = [0]
print(&amp;#39;1 - &amp;#39;,id(ham))
spam(ham)
print(&amp;#39;5 - &amp;#39;,id(ham))
```
```python
=&amp;gt; 1 -  4367282952
   2 -  4367282952
   3 -  4367282952
   4 -  4365173256
   5 -  4367282952
```

### immutable 한 경우..
```python
def spam(eggs):
    eggs += &amp;#39;!!!&amp;#39; # &amp;#39;hi&amp;#39;.append(&amp;#39;!!!&amp;#39;) -- x
    # eggs = &amp;#39;hi&amp;#39; + &amp;#39;!!!&amp;#39; -- o
    print(eggs)

ham = &amp;#39;hi&amp;#39;
spam(ham)
```
```python
=&amp;gt; hi!!!
```
```python
print(ham)
=&amp;gt; hi
```
## mutable 한 경우

```python
def spam(eggs):
    eggs.append(3)
    print(eggs, &amp;#39;in func&amp;#39;)
    
ham = [1, 2]
spam(ham)
print(ham)
```
```python
=&amp;gt; [1, 2, 3] in func
   [1, 2, 3]
```


# 람다 함수

장점 : 메모리 절약, 간단한 문법
```python
import weakref


def function(x):
    x += 1
    return x


# function함수의 약한 참조를 생성.
# 객체에 대한 참조가 약한참조만 남은 경우에 gc(갈비지컬랙터)에 의해서 제거됨 (dead)
wkr_function = weakref.ref(function)
```
```python
wkr_function
=&amp;gt; &amp;lt;weakref at 0x104510188; to &amp;#39;function&amp;#39; at 0x10449e8c8 (function)&amp;gt;
```
```python
del function

# 제거됨
wkr_function
=&amp;gt; &amp;lt;weakref at 0x104510188; dead&amp;gt;
```
&amp;gt; 람다 함수를 사용하는 경우에는, 함수이름을 del 할 필요없이, 바로 제거

```python
wkr_lambda = weakref.ref(lambda x: x+ 1)
```
```python
wkr_lambda
=&amp;gt; &amp;lt;weakref at 0x1045107c8; dead&amp;gt;
```&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/sonypark/75abd700e5799037f0d08e3f25a90c44.js&quot;&gt; &lt;/script&gt;

</content>
 </entry>
 
 <entry>
   <title>TIL_190120</title>
   <link href="http://localhost:4000/til/2019/01/20/TIL/"/>
   <updated>2019-01-20T00:00:00+09:00</updated>
   <id>http://localhost:4000/til/2019/01/20/TIL</id>
   <content type="html">&lt;h1 id=&quot;오늘-한-일&quot;&gt;오늘 한 일&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;패스트캠퍼스 파이썬 중급 강의 두 번째 수업 정리 및 복습&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/sonypark/75abd700e5799037f0d08e3f25a90c44&quot;&gt;gist.github.com&lt;/a&gt;에 업로드
    &lt;h4 id=&quot;함수의-정의-및-호출&quot;&gt;함수의 정의 및 호출&lt;/h4&gt;
    &lt;ul&gt;
      &lt;li&gt;함수 객체 이해하기&lt;/li&gt;
      &lt;li&gt;함수 네임스페이스 및 스코프&lt;/li&gt;
      &lt;li&gt;람다함수 이해하기&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://dojang.io/course/view.php?id=7&quot;&gt;파이썬코딩도장&lt;/a&gt; part 2 공부&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;영어공부: 생활 영어 표현 5개 암기 및 작문&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;느낀점&quot;&gt;느낀점&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;요새 주로 집에서 공부를 하고 있다. 아무래도 밖에서 공부하는 것보다 효율이 떨어진다. 내일부터는 다시 카페에 가서 공부해야겠다.&lt;/li&gt;
  &lt;li&gt;운동을 한 달 넘게 쉬었다. 공부를 할 때는 체력도 중요하다. 다시 운동을 시작하자. 장기전이다. 꾸준히 집중력있게 공부하기 위해서 운동은 병행해야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;내일-할-일&quot;&gt;내일 할 일&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;영어공부: 생활 영어 표현 5개 암기 및 작문&lt;/li&gt;
  &lt;li&gt;패스트캠퍼스 수업 복습&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dojang.io/course/view.php?id=7&quot;&gt;파이썬코딩도장&lt;/a&gt; part 2 공부&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>TIL_190119</title>
   <link href="http://localhost:4000/til/2019/01/19/TIL/"/>
   <updated>2019-01-19T00:00:00+09:00</updated>
   <id>http://localhost:4000/til/2019/01/19/TIL</id>
   <content type="html">&lt;h1 id=&quot;오늘-한-일&quot;&gt;오늘 한 일&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;패스트캠퍼스 파이썬 중급 강의 세 번째 수업
    &lt;ul&gt;
      &lt;li&gt;1급객체 함수&lt;/li&gt;
      &lt;li&gt;재귀호출&lt;/li&gt;
      &lt;li&gt;멀티플 디스패치 처리&lt;/li&gt;
      &lt;li&gt;함수형 처리 함수&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;영어공부: 생활 영어 표현 5개 암기 및 작문&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;느낀점&quot;&gt;느낀점&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;파이썬을 공부할수록 결코 쉽지 않은 언어라는 걸 알게 된다. 언어의 모든 기능을 알 필요는 없지만 해당 언어의 라이브러리를 뜯어보고 수정해서 쓸 정도가 되려면 기본 원리와 기능들을 알아야한다.&lt;/li&gt;
  &lt;li&gt;이제까지 남들이 만들어 놓은 라이브러리를 가져다 쓸 줄만 알았지 내가 필요한 대로 수정할 생각은 못 한 것 같다. 앞으로 남이 만든 라이버리를 수정하거나 직접 라이브러리를 만들 일이 반드시 생길 것이다. 이왕 공부하는 거 제대로 배워놓자.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;내일-할-일&quot;&gt;내일 할 일&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;영어공부: 생활 영어 표현 5개 암기 및 작문&lt;/li&gt;
  &lt;li&gt;패스트캠퍼스 수업 복습&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dojang.io/course/view.php?id=7&quot;&gt;파이썬코딩도장&lt;/a&gt; part 2 공부&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>TIL_190118</title>
   <link href="http://localhost:4000/til/2019/01/18/TIL/"/>
   <updated>2019-01-18T00:00:00+09:00</updated>
   <id>http://localhost:4000/til/2019/01/18/TIL</id>
   <content type="html">&lt;h1 id=&quot;오늘-한-일&quot;&gt;오늘 한 일&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://dojang.io/course/view.php?id=7&quot;&gt;파이썬코딩도장&lt;/a&gt; part 2 공부&lt;/li&gt;
  &lt;li&gt;영어공부: 생활 영어 표현 5개 암기 및 작문&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;느낀점&quot;&gt;느낀점&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;공부가 재미있다. 영어 공부와 프로그래밍 공부 모두 억지로 하는 게 아니라 재밌어서 하는 공부이다.&lt;/li&gt;
  &lt;li&gt;앞으로도 꾸준히 지속하자. 꾸준히 하면 점점 더 성장할 것이라 믿는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;내일-할-일&quot;&gt;내일 할 일&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;영어공부: 생활 영어 표현 5개 암기 및 작문&lt;/li&gt;
  &lt;li&gt;패스트캠퍼스 수업 복습&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dojang.io/course/view.php?id=7&quot;&gt;파이썬코딩도장&lt;/a&gt; part 2 공부&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>TIL_190117</title>
   <link href="http://localhost:4000/til/2019/01/17/TIL/"/>
   <updated>2019-01-17T00:00:00+09:00</updated>
   <id>http://localhost:4000/til/2019/01/17/TIL</id>
   <content type="html">&lt;h1 id=&quot;오늘-한-일&quot;&gt;오늘 한 일&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;패스트캠퍼스 파이썬 중급 강의 두 번째 수업
    &lt;h4 id=&quot;함수의-정의-및-호출&quot;&gt;함수의 정의 및 호출&lt;/h4&gt;
    &lt;ul&gt;
      &lt;li&gt;함수 객체 이해하기&lt;/li&gt;
      &lt;li&gt;함수 네임스페이스 및 스코프&lt;/li&gt;
      &lt;li&gt;람다함수 이해하기&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;느낀점&quot;&gt;느낀점&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;오늘은 수업들은 거 말고는 딱히 공부를 많이 하진 못 했다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;내일-할-일&quot;&gt;내일 할 일&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;영어공부: 생활 영어 표현 5개 암기 및 작문&lt;/li&gt;
  &lt;li&gt;패스트캠퍼스 수업 복습&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dojang.io/course/view.php?id=7&quot;&gt;파이썬코딩도장&lt;/a&gt; part 2 공부&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>TIL_190116</title>
   <link href="http://localhost:4000/til/2019/01/16/TIL/"/>
   <updated>2019-01-16T00:00:00+09:00</updated>
   <id>http://localhost:4000/til/2019/01/16/TIL</id>
   <content type="html">&lt;h1 id=&quot;오늘-한-일&quot;&gt;오늘 한 일&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://dojang.io/course/view.php?id=7&quot;&gt;파이썬코딩도장&lt;/a&gt; part 1 공부 (교재의 1/3)&lt;/li&gt;
  &lt;li&gt;영어공부: 생활 영어 표현 5개 암기 및 작문&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;느낀점&quot;&gt;느낀점&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;오늘은 약속이 있어서 공부를 많이 하진 못 했다.&lt;/li&gt;
  &lt;li&gt;두 번째 파이썬 교재 공부를 시작했다. 오늘은 1/3 정도 공부했다.&lt;/li&gt;
  &lt;li&gt;내일은 나머지 1/3을 공부할 생각이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;내일-할-일&quot;&gt;내일 할 일&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;영어공부: 생활 영어 표현 5개 암기 및 작문&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dojang.io/course/view.php?id=7&quot;&gt;파이썬코딩도장&lt;/a&gt; part 2 공부&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>패스트캠퍼스_파이썬중급_01</title>
   <link href="http://localhost:4000/python/2019/01/15/py-fastcampus01/"/>
   <updated>2019-01-15T00:00:00+09:00</updated>
   <id>http://localhost:4000/python/2019/01/15/py-fastcampus01</id>
   <content type="html">&lt;noscript&gt;&lt;pre&gt;## break
- loop문 안을 빠져 나올 때 쓴다
- break는 loop문 안에서만 사용 가능하다
```python
while True:
    print(&amp;quot;while&amp;quot;)
    break
```
~~~
=&amp;gt; while   # while 한 번만 출력되고 loop문 끝남
~~~
```python
for i in range(100):
    print(&amp;#39;for&amp;#39;)
    break
```
```python
=&amp;gt; for     # for 한 번만 출력되고 loop문 끝남
```

## continue
- loop문 안에서 continue를 만나면 다시 loop문 처음으로 돌아간다.
- continue 밑에 코드는 실행되지 않는다.
```python
for i in range(2):
    print(&amp;#39;top&amp;#39;)
    continue
    # 이하 건너 뜀
    print(&amp;quot;bottom&amp;quot;)
```
```python
# top 두 번 출력
=&amp;gt; top
=&amp;gt; top
```

## else (if, while, for)
- 조건문에서 쓰인다.
- if문 뿐 아니라 while, for문에서도 쓰인다.
```python
# random.randint(a,b)
# =&amp;gt; Return a random integer N such that a &amp;lt;= N &amp;lt;= b.
while random.randint(0,1): # 0(False) 또는 1(True) 리턴
    print(&amp;#39;while&amp;#39;)
    # break # =&amp;gt; break가 있다면 여기서 loop문 종료된다.
else:
    print(&amp;#39;else&amp;#39;)
```

- **for문에서 else문은 iterator객체가 모두 소모된 이후에 실행된다**
```python
for i in range(3):
    print(&amp;#39;for&amp;#39;)
else:
    print(&amp;#39;else&amp;#39;)
```
```python
=&amp;gt; for # iterator 객체 3 소모
=&amp;gt; for
=&amp;gt; for
=&amp;gt; else # iterator 객체 소모 된 이후 실행
```

## else with try
- try문에서 else는 에러가 발생하지 않은 경우에만 실행된다.
```python
try:
    assert random.randint(0, 1)
    print(&amp;#39;try&amp;#39;)
except:
    # 만약 에러가 발생해서 예외처리되면, else구문으로 넘어가지 않고 
    # except구문에서 종료
    print(&amp;#39;except&amp;#39;)
else:
    print(&amp;#39;else&amp;#39;)
```
## finally
- 무조건 실행된다.
- 중간에 return이 있어도 finally는 실행된다.

```python
def a():
    try:
        assert random.randint(0, 1)
        print(&amp;#39;try&amp;#39;)
        return True
    except:
        print(&amp;#39;except&amp;#39;)
        return False
    else:
        print(&amp;#39;else&amp;#39;)
    finally:
        print(&amp;#39;finally&amp;#39;)
        # 에러가 발생했든, 하지 않았든 상관치 않고 실행된다.
        # 이전에 return으로 함수가 종료되어도 finally는 실행된다.
```

# 스페셜 메소드
- 파이썬 내에서 사용되는 프로토콜
- 객체에 특정 기능을 호출할 때 사용된다.

## 인스턴스 객체 생성
### instance = Class(1,2)

&amp;gt; **스페셜 메소드 호출 순서**
&amp;gt;1. `__call__`
&amp;gt;2. `__new__`
&amp;gt;3. `__init__`

## `__init__`
```python
class A:
    def __init__(self, a, b):
        # 인스턴스 생성 후 가장 먼저 실행되는 스페셜 메소드, 인스턴스 초기 설정
        print(&amp;quot;인스턴스 초기화&amp;quot;)
        self.a = a
        self.b = b

=&amp;gt; a = A(1, 2)
```
## `__new__`
- instance를 생성하는 생성자 역할
- class를 인자값으로 받아 instance를 만든다
- 오버라이딩 하는 경우 `object에 구현된 __new__`를 이용해서 instance를 만든다.


```python
class B:
    def __new__(cls): #self가 아닌 cls를 사용한다. 아직 인스턴스가 생성되지 않은 상태이기 때문에. class를 인자로 받는다.
        print(&amp;quot;인스턴스를 만듭니다.&amp;quot;)
        print(cls)
        # return 1 # 이라고 작성하면 B클래스를 호출하면 항상 1을 리턴한다.
        return super().__new__(cls)
```
```python
b = B()
```
```python
=&amp;gt; 인스턴스를 만듭니다.
=&amp;gt; &amp;lt;class &amp;#39;__main__.B&amp;#39;&amp;gt;
```

## `__call__`
```python
class C:
    def __call__(self, *args):
        print(&amp;quot;호출&amp;quot;)
```
```python
# 인스턴스를 호출할때 -&amp;gt; 즉 괄호`()`를 열고 닫을때 실행되는 메소드
c = C()
c()
```
```python
=&amp;gt; 호출
```

## 질문1
&amp;gt; - 위 `__new__`, `__call__` 예시에서
&amp;gt; - b = B()를 선언하면 `def __new__(cls)` 이 실행되는데
&amp;gt; - c = C()를 선언한 이후에 c()를 입력해야 `def __call__(self, *args)` 이 실행됩니다.
&amp;gt; - 그 이유가 무엇인가요?


~~~
클래스를 호출할때 실행되는 `__call__` 스페셜 메소드는 어디에 있을까?
=&amp;gt; 클래스를 만드는 메타클래스인 `type`클래스에 있는 `__call__`을 호출함
~~~
```python
type(C) # 클래스의 type 확인 / 즉 C class 객체를 생성한 클래스를 확인
```

```python
=&amp;gt;type
```

## 커스텀 메타 클레스 만들기
```python
class TypeClass(type):
    def __call__(cls, *args):
        print(&amp;#39;call&amp;#39;)
        instance = cls.__new__(cls)
        instance.__init__(*args)
        return instance
```



## 질문2
&amp;gt; - instance = `cls.__new__(cls)`
&amp;gt; - 이 부분의 의미를 잘 모르겠습니다.
&amp;gt; - TypeClass(type) 안에는 `__new__(cls)`라는 함수가 존재하지 않는데 어떻게 이렇게 선언할 수 있나요?
&amp;gt; - instance = `cls.__new__(cls)`
&amp;gt; - instance.`__init__(*args)`
&amp;gt; - 이 두 부분에 대해 설명 부탁드립니다.



## 커스텀 메타클래스 적용시키는 방법
- class A(metaclass=TypeClass): in v3

```python
class A(metaclass=TypeClass):
    def __new__(cls):
        print(&amp;#39;new&amp;#39;)
        return super().__new__(cls)
    
    def __init__(self, x, y, z):
        print(&amp;#39;init&amp;#39;)
        self.x = x
        self.y = y
        self.z = z
```


## 질문3
&amp;gt; - `return super().__new__(cls)`
&amp;gt; - 이 부분이 의미하는 바를 정확히 모르겠습니다.
&amp;gt; - 저 부분을 return함으로서 생기는 결과가 무엇인가요?


```python
instance = A(1, 2, 3)
```
```python
# 순서대로 호출
=&amp;gt; call
=&amp;gt; new
=&amp;gt; init
```



## 싱글턴
- 최초에 생성한 인스턴스만 리턴해주는 클래스
```python
class St:
    def __new__(cls):
        if not hasattr(cls, &amp;#39;instance&amp;#39;):
            cls.instance = super().__new__(cls)
        return cls.instance
```
```python
St() is St()
```
```python
=&amp;gt; True
```


## 질문4
&amp;gt; - 싱글턴
&amp;gt; - 싱글턴을 설명하는 위의 코드가 잘 이해되지 않습니다.
&amp;gt; - return에 `super().__new__(cls)` 로 쓸 때와의 차이점은 무엇인가요?
&amp;gt; - 싱글턴을 사용하는 상황과 예시는 어떤 게 있나요?


## with(context 관리)
~~~
with -&amp;gt; &amp;#39;__enter__&amp;#39;, &amp;#39;__exit__&amp;#39; 순으로 진행된다.
시작할 때 enter, 끝날 때 exit 가 실행된다. 

__enter__ : with구문 시작할때,
__exit__: with구문 (들여쓰기가) 끝날때

파일을 열 때 with을 쓰는 이유는 __exit__ 부분에서 f.close를 자동으로 해주기 때문이다.
~~~

```python
class Context:
    def __enter__(self):
        print(&amp;quot;__enter__&amp;quot;)
        return self
    
    def __exit__(self, *args):
        print(&amp;#39;exit&amp;#39;)
```
```python
c = Context()
```
```python
with c: # __enter__
    with c: # __enter__
        with c: # __enter__
            pass # __exit__
        pass # __exit__
    pass # __exit__

```
```python
=&amp;gt; __enter__
=&amp;gt; __enter__
=&amp;gt; __enter__
=&amp;gt; exit
=&amp;gt; exit
=&amp;gt; exit
```

```python
f = open(&amp;quot;./test.txt&amp;quot;, &amp;#39;w&amp;#39;)
hasattr(f, &amp;#39;__enter__&amp;#39;), hasattr(f, &amp;#39;__exit__&amp;#39;)
```
```python
=&amp;gt; (True, True)
```
```python
f.close()
f.closed 
```
```python
=&amp;gt; True
```
```python
c = Context()
with c:
    pass
--------------------
with Context() as c:
    pass
    
는 동일한 실행 방법이다
```

##### 파일래퍼객체에는 with구문안에서 사용될 수 있도록 스페셜 메소드가 구현되어 있다.
```python
f = open(&amp;quot;./test.txt&amp;quot;, &amp;#39;w&amp;#39;)
hasattr(f, &amp;#39;__enter__&amp;#39;), hasattr(f, &amp;#39;__exit__&amp;#39;)
```
```python
=&amp;gt; (True, True)
# __exit__메소드가 실행될 때, .close()메소드가 실행되서 파일io를 종료한다.
```

----

## `__exit__` 스페셜 메소드에 들어오는 인자는??

### `def __exit__(self, error_type, error, traceback):`

`error_type` : with구문 안에서 발생한 에러의 클래스

`error`: with구문 안에서 발생한 에러의 인스턴스

`traceback`: with구문 안에서 발생한 에러의 traceback

&amp;gt; traceback은 추후에 수업 예정



이러한 인자를 받기 때문에,     
with구문 안에서 에러가 발생한 경우에 대처할 수 있게 된다.


만약 에러가 발생하지 않으면 `None, None, None`이 들어온다


```python
class Context:
    def __enter__(self):
        print(&amp;quot;__enter__&amp;quot;)
        return self
    
    def __exit__(self, error_cls, error_instance, traceback):
        print(&amp;#39;exit&amp;#39;)
```

```python
c = Context()
```

```python
with c:
    raise IndexError(&amp;quot;인스턴스입니다.&amp;quot;)
```
```python
__enter__
exit
(&amp;lt;class &amp;#39;IndexError&amp;#39;&amp;gt;, IndexError(&amp;#39;인스턴스입니다.&amp;#39;), &amp;lt;traceback object at 0x1083c5dc8&amp;gt;)
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
&amp;lt;ipython-input-150-68d46299f410&amp;gt; in &amp;lt;module&amp;gt;
      1 with c:
----&amp;gt; 2     raise IndexError(&amp;quot;인스턴스입니다.&amp;quot;)

IndexError: 인스턴스입니다.
```

## with 활용 2

`python trick` 책에서 나온 예제.

참고주소 : https://realpython.com/
&amp;gt; 메일링 서비스 신청하면 좋습니다. 좋은 주제 많이 이야기하는 파이썬 블로그입니다. (현솔 강사님 추천)

```python
class Indenter:
    def __init__(self):
        self.level = 0
        
    def __enter__(self):
        self.level += 1
        return self
    
    def __exit__(self, *args):
        self.level -= 1
        
    def print(self, text):
        print(&amp;quot;    &amp;quot; * self.level + text)
```
```python
with Indenter() as indent:
    indent.print(&amp;quot;hi&amp;quot;)
    with indent:
        indent.print(&amp;quot;hello&amp;quot;)
        with indent:
            indent.print(&amp;#39;안녕하세요&amp;#39;)
        indent.print(&amp;#39;bye&amp;#39;)
    indent.print(&amp;quot;quit&amp;quot;)
```
~~~
    hi
        hello
            안녕하세요
        bye
    quit
~~~

# 자료구조(tuple, list, dict, set, str)
- 2 종류의 추상클래스로 묶어서 이해하기
- Container 와 Sequence(Container + 순서 정보)

## Container
- __contains__ 가 구현되어 있는 객체
- __contains__를 함수가 아닌 상수로 선언해도 Container로 인지한다.
~~~
class MC:
    def __contains__(self, value):
        return True
    
    # __contains__ = 1  # 메소드가 아닌 경우에도 Container객체라고 판단함.
~~~
```python
issubclass(MC, Container)
```
```python
=&amp;gt; True
```
## Container의 특징
#### in ( not in ) : 포함 여부
#### len : 길이
#### max,min : 최대값, 최소값

## Sequence
- container + 순서

## Sequence 특징
#### 더하기 연산 +

```
[1, 2, 3] + [4, 5, 6]
=&amp;gt; [1, 2, 3, 4, 5, 6]
```
#### 곱하기 연산 (* n)

```
[1, 2] * 10
=&amp;gt; [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
```
#### indexing 색인

```
[1, 2, 3][0]
=&amp;gt; 1
```
#### slice

```
a = [1, 2, 3, 4]
a[1:3] #  == a[slice(1, 3)] 슬라이스객체로 인덱싱하는것이랑 동일
```

## super 클래스

```python
class Z:
    def a(self):
        print(&amp;quot;a in Z&amp;quot;, self)
        
class A(Z):
    def a(self):
        print(&amp;quot;a in A&amp;quot;, self)
        
        
class C:
    def a(self):
        print(&amp;quot;a in C&amp;quot;, self)
        
        
class B(A, C):
    def a(self):
        print(&amp;quot;a in B&amp;quot;, self)  

```

```python
B.mro()
```
```python
[__main__.B, __main__.A, __main__.Z, __main__.C, object]
```
```python
b = B()
b.a() # B.mro() 순서대로 메소드를 탐색해서 실행시킴
```

```python
=&amp;gt; a in B &amp;lt;__main__.B object at 0x108445c18&amp;gt;
```

## super(기준 클래스, 인스턴스)
- 기준 클래스는 무시 -&amp;gt; mro 기준 다음 클래스부터 탐색

```python
super(B, b).a()
```
```python
=&amp;gt; a in A &amp;lt;__main__.B object at 0x108420dd8&amp;gt;
```
```python
B.mro()
```
```python
==&amp;gt; [__main__.B, __main__.A, __main__.Z, __main__.C, object]
```
```python
super(B, b).a()
```
```python
==&amp;gt; a in A &amp;lt;__main__.B object at 0x108420dd8&amp;gt;
```
```python
super(A, b).a()
```
```python
==&amp;gt; a in Z &amp;lt;__main__.B object at 0x108420dd8&amp;gt;
```
```python
super(C, b).a()
```
```python
==&amp;gt; Error   #(C 뒤에는 Object 이기 때문)
```

```python
class B:
    def bm(self):
        print(&amp;#39;b in B&amp;#39;)
        
class A(B):
    def bm(self):
        print(&amp;#39;b in A&amp;#39;)
        
    def am(self):
        super().bm() # == super(A, self).bm() 작성한 것과 동일
        # 클래스 안에서 사용하면 자동으로, 속한 클래스와 인스턴스를 인자로 보냄
```

```python
instance = A()
instance.am()
```
```python
=&amp;gt; b in B
```
```python
A.am()
```
```python
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&amp;lt;ipython-input-291-bb4ec2b72093&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 A.am()

TypeError: am() missing 1 required positional argument: &amp;#39;self&amp;#39;
```&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/sonypark/e11d1e247b7975c31a894b9981f8e506.js&quot;&gt; &lt;/script&gt;

</content>
 </entry>
 
 <entry>
   <title>TIL_190115</title>
   <link href="http://localhost:4000/til/2019/01/15/TIL/"/>
   <updated>2019-01-15T00:00:00+09:00</updated>
   <id>http://localhost:4000/til/2019/01/15/TIL</id>
   <content type="html">&lt;h1 id=&quot;오늘-한-일&quot;&gt;오늘 한 일&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;파이썬 교재 1독(복습) - 점프투파이썬&lt;/li&gt;
  &lt;li&gt;영어공부: 생활 영어 표현 5개 암기 및 작문&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;느낀점&quot;&gt;느낀점&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;점프투파이썬을 다시 한 번 보았다. 다시 보니 또 새롭다.&lt;/li&gt;
  &lt;li&gt;이번주는 파이썬 교재를 하나 더 볼 생각이다. &lt;a href=&quot;https://dojang.io/course/view.php?id=7&quot;&gt;파이썬코딩도장&lt;/a&gt; 이라는 책을 얼마전에 선물 받았는데 설명도 잘 돼 있고 공부하기 좋을 거 같다.&lt;/li&gt;
  &lt;li&gt;패스트캠퍼스에서 파이썬 강의도 듣고 교재와 생활코딩을 병행해서 공부하니 효율이 높은 것 같다.&lt;/li&gt;
  &lt;li&gt;이번주까지 파이썬에 집중하고 다음주 부터는 본격적으로 JS를 공부하려고 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;내일-할-일&quot;&gt;내일 할 일&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;영어공부: 생활 영어 표현 5개 암기 및 작문&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dojang.io/course/view.php?id=7&quot;&gt;파이썬코딩도장&lt;/a&gt; part 1 공부&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>TIL_190114</title>
   <link href="http://localhost:4000/til/2019/01/14/TIL/"/>
   <updated>2019-01-14T00:00:00+09:00</updated>
   <id>http://localhost:4000/til/2019/01/14/TIL</id>
   <content type="html">&lt;h1 id=&quot;오늘-한-일&quot;&gt;오늘 한 일&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;생활코딩 &lt;a href=&quot;https://opentutorials.org/course/1750&quot;&gt;Python&amp;amp;Ruby 강의&lt;/a&gt; 완강&lt;/li&gt;
  &lt;li&gt;깃헙 블로그 재설치&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;느낀점&quot;&gt;느낀점&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;생활코딩 &lt;a href=&quot;https://opentutorials.org/course/1750&quot;&gt;Python&amp;amp;Ruby 강의&lt;/a&gt;를 완강했다. 예전에 필요해서 공부한 경험이 있었지만 이번 기회에 기초 지식을 좀 더 단단히 할 수 있었다. 수업을 들으며 그 동안 가졌더 의문이 많이 해결 되었다.&lt;/li&gt;
  &lt;li&gt;실수로 깃헙 블로그 데이터를 모두 날렸다. 블로그 수정을 하려다 git push를 잘 못 했고 그 걸 되돌리려다 완전히 다 날려버렸다. 그래서 처음부터 다시 깔았다.. 불행 중 다행인 건 그 동안 게시했던 포스팅(얼마 없지만..)은 따로 백업해두었다는 것이었다. 아직 git 명령어에 익숙지 않아 자칫 하면 데이터를 크게 날릴 위험이 있다. 앞으로는 git 공부도 열심히 해야겠다.&lt;/li&gt;
  &lt;li&gt;블로그 시작 초반이고 포스팅이 몇 개 없어서 망정이지 그렇지 않았다면 엄청난 멘붕에 휩싸였을 것 같다. 오늘 일을 교훈 삼아 앞으로 더 주의하자.&lt;/li&gt;
  &lt;li&gt;강제 푸시(git push –force)는 정말 위험하다..
    &lt;h1 id=&quot;내일-할-일&quot;&gt;내일 할 일&lt;/h1&gt;
  &lt;/li&gt;
  &lt;li&gt;영어공부: 생활 영어 표현 5개 암기 및 작문&lt;/li&gt;
  &lt;li&gt;파이썬 교재 1독(복습) - 점프투파이썬&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>TIL_190113</title>
   <link href="http://localhost:4000/til/2019/01/13/TIL/"/>
   <updated>2019-01-13T00:00:00+09:00</updated>
   <id>http://localhost:4000/til/2019/01/13/TIL</id>
   <content type="html">&lt;h1 id=&quot;오늘-한-일&quot;&gt;오늘 한 일&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;생활코딩 &lt;a href=&quot;https://opentutorials.org/course/1750&quot;&gt;Python&amp;amp;Ruby 강의&lt;/a&gt; 수강&lt;/li&gt;
  &lt;li&gt;영어공부 : 생활영어 표현 5개 암기 및 영어 작문&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;느낀점&quot;&gt;느낀점&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;파이썬을 제대로 공부한 적이 없어서 그런지 생활코딩, 패스트캠퍼스의 파이썬 강의를 통해 많이 배운다.&lt;/li&gt;
  &lt;li&gt;이전에는 딥러닝을 공부하면서 Scrapy 크롤링이나 CNN 모델을 테스트 하기 위해 그 때 그 때 필요한 부분만 찾아서 공부했다. 그래서 파이썬 언어의 기본 문법이나 구조를 제대로 알지 못하고 사용했다. (&lt;code class=&quot;highlighter-rouge&quot;&gt;__init__&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt; 등)&lt;/li&gt;
  &lt;li&gt;파이썬을 처음부터 다시 공부하면서 객체 지향 프로그래밍에 대해서도 다시 한 번 되짚어 볼 수 있어 좋다.&lt;/li&gt;
  &lt;li&gt;오늘은 좀 게으름을 피웠다. 일요일이라 그런지 좀 쉬고 싶은 마음도 있었다. 내일부터는 다시 부지런히 공부해야겠다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;내일-할-일&quot;&gt;내일 할 일&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;생활코딩 &lt;a href=&quot;https://opentutorials.org/course/1750&quot;&gt;Python&amp;amp;Ruby 강의&lt;/a&gt; 듣기&lt;/li&gt;
  &lt;li&gt;영어공부: 생활 영어 표현 5개 암기 및 작문&lt;/li&gt;
  &lt;li&gt;파이썬 교재 1독(복습) - 점프투파이썬&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>TIL_190112</title>
   <link href="http://localhost:4000/til/2019/01/12/TIL/"/>
   <updated>2019-01-12T00:00:00+09:00</updated>
   <id>http://localhost:4000/til/2019/01/12/TIL</id>
   <content type="html">&lt;h1 id=&quot;오늘-한-일&quot;&gt;오늘 한 일&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;패스트캠퍼스 파이썬 중급 강의 첫 수업 수강&lt;/li&gt;
  &lt;li&gt;수업 내용 복습 : &lt;a href=&quot;https://gist.github.com/sonypark/e11d1e247b7975c31a894b9981f8e506&quot;&gt;gist.github.com&lt;/a&gt;에 업로드&lt;/li&gt;
  &lt;li&gt;영어공부 : 생활영어 표현 5개 암기 및 영어 작문&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;느낀점&quot;&gt;느낀점&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;나는 그 동안 파이썬의 10%도 사용하지 못 하고 있었다.&lt;/li&gt;
  &lt;li&gt;수업 듣길 잘 했다.&lt;/li&gt;
  &lt;li&gt;markdown 문법에 조금씩 익숙해지고 있다. Github page 와 gist 를 시작하길 잘 한 것 같다.&lt;/li&gt;
  &lt;li&gt;앞으로 파이썬 강의 내용을 복습한 후 gist에 올리고 그 중에서 특히 도움이 되는 내용은 Github page에 올리자&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;내일-할-일&quot;&gt;내일 할 일&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;생활코딩 &lt;a href=&quot;https://opentutorials.org/course/1750&quot;&gt;Python&amp;amp;Ruby 강의&lt;/a&gt; 듣기&lt;/li&gt;
  &lt;li&gt;영어공부: 생활 영어 표현 5개 암기 및 작문&lt;/li&gt;
  &lt;li&gt;파이썬 교재 1독(복습) - 점프투파이썬&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>TIL_190111</title>
   <link href="http://localhost:4000/til/2019/01/11/TIL-02/"/>
   <updated>2019-01-11T00:00:00+09:00</updated>
   <id>http://localhost:4000/til/2019/01/11/TIL-02</id>
   <content type="html">&lt;h1 id=&quot;오늘-한-일&quot;&gt;오늘 한 일&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;생활코딩 &lt;a href=&quot;https://opentutorials.org/course/1750&quot;&gt;Python&amp;amp;Ruby 강의&lt;/a&gt; 듣기&lt;/li&gt;
  &lt;li&gt;영어공부 : 생활영어 표현 5개 암기 및 영어 작문&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;느낀점&quot;&gt;느낀점&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;주석을 달 때 규칙&lt;/strong&gt;
    &lt;blockquote&gt;
      &lt;ol&gt;
        &lt;li&gt;&lt;strong&gt;간결하면서 이해하기 쉽게 달 것&lt;/strong&gt;&lt;/li&gt;
        &lt;li&gt;&lt;strong&gt;주석을 달 필요 없는 코드를 작성할 것&lt;/strong&gt;&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; - 코드만 보고도 이해 할 수 있게 작성하는 게 중요하다
 - 최고의 주석은 '주석이 필요 없는 코드'이다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;내일-할-일&quot;&gt;내일 할 일&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;패스트캠퍼스 파이썬 강의 첫 수업&lt;/li&gt;
  &lt;li&gt;생활코딩 &lt;a href=&quot;https://opentutorials.org/course/1750&quot;&gt;Python&amp;amp;Ruby 강의&lt;/a&gt; 듣기&lt;/li&gt;
  &lt;li&gt;영어공부: 생활 영어 표현 5개 암기 및 작문&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>TIL_190110</title>
   <link href="http://localhost:4000/til/2019/01/10/TIL/"/>
   <updated>2019-01-10T00:00:00+09:00</updated>
   <id>http://localhost:4000/til/2019/01/10/TIL</id>
   <content type="html">&lt;h1 id=&quot;오늘-한-일&quot;&gt;오늘 한 일&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;jekyll&lt;/a&gt; 테마로 깃헙 블로그 론칭. 이거 만드는 데만 이틀을 꼬박 보냈다. 여러 테마를 적용해보며 10번 넘게 설치와 삭제를 반복했다.(예쁘고 맘에 드는 테마일 수록 설정이 복잡하다.. 결국 처음에 고른 가장 간단한 테마로 결정)
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/codinfox/codinfox-lanyon&quot;&gt;codinfox&lt;/a&gt; 탬플릿을 사용했다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;템플릿과 TIL(Today I Learned) 작성 형식&lt;/strong&gt;은 &lt;a href=&quot;https://wayhome25.github.io/&quot;&gt;초보몽키&lt;/a&gt;님의 블로그를 참고했다.&lt;/li&gt;
      &lt;li&gt;TIL을 시작하기로 마음 먹은 것도 초보몽키님의 TIL을 보고 자극을 받았기 때문이다.&lt;/li&gt;
      &lt;li&gt;아직 템플릿과 포스팅이 익숙지 않아서 초보몽키님의 블로그를 참고하며 앞으로도 많이 도움을 받을 것 같다.&lt;/li&gt;
      &lt;li&gt;이곳도 언젠간 누군가에게 도움을 주는 블로그가 되었으면 좋겠다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;생활코딩 &lt;a href=&quot;https://opentutorials.org/course/1750&quot;&gt;Python&amp;amp;Ruby 강의&lt;/a&gt; 듣기&lt;/li&gt;
  &lt;li&gt;영어공부 : 생활영어 표현 5개 암기 및 영어 작문&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;느낀점&quot;&gt;느낀점&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;너무 조급해 하지 말자. 빨리 가려다 중요한 걸 놓친다.&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;공부할 게 많다 보니 조급해진다. 그러다 보니 기초적인 걸 건너뛰고 싶어질 때가 있다. 하지만 기초가 가장 중요하다. 구현에만 급급하지 말고 언어의 구성요소와 작동원리 등도 차근차근 공부하자.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;나무보다는 숲을 보자. 정말 중요한 것에 집중하자.&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;중심보다 주변적인 것에 시간을 너무 많이 썼다.
        &lt;ol&gt;
          &lt;li&gt;깃헙 블로그도 좀 더 멋진 테마를 사용 하고 싶어서 테마를 깔았다 지웠다만 10번을 넘게 했다. 지금 내게 중요한 건 디자인 보다는 내가 공부한 내용을 꾸준히 올리는 것이다.&lt;/li&gt;
          &lt;li&gt;파이썬과 루비를 Atom 에디터를 쓰면 한 번에 실습 가능한데 굳이 jetbrains IDE를 따로따로 설치했다. 앞으로 계속 쓸 IDE 이기 때문에 큰 잘못은 아니지만 지금 내게 필요한 작업을 하는데는 Atom으로 충분했다. 지금 중요한 게 무엇인지 먼저 생각하고 거기에 집중하도록 하자.&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;개발자에게 영어란 가장 강력한 무기이다.&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;영어를 몰라도 개발을 할 수는 있지만 개발을 통해 더 빨리 더 많은 것을 하기 위해선 영어가 필수이다.&lt;/li&gt;
      &lt;li&gt;특히 공부를 하다 문제가 생겼을 때 해결해줄 수 있는 대부분의 컨텐츠는 영어로 되어있다. 실제로 개발 도중 오류가 나거나 궁금한 게 있을 때 한국어보다 영어 컨텐츠를 통해 해결한 경우가 많다.&lt;/li&gt;
      &lt;li&gt;영어 공부도 개발 공부 못지 않게 매일 꾸준히 해야한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;내일-할-일&quot;&gt;내일 할 일&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;생활코딩 &lt;a href=&quot;https://opentutorials.org/course/1750&quot;&gt;Python&amp;amp;Ruby 강의&lt;/a&gt; 듣기&lt;/li&gt;
  &lt;li&gt;영어공부: 생활 영어 표현 5개 암기 및 작문&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>TIL (Today I learned) 시작</title>
   <link href="http://localhost:4000/til/2019/01/10/TIL-01/"/>
   <updated>2019-01-10T00:00:00+09:00</updated>
   <id>http://localhost:4000/til/2019/01/10/TIL-01</id>
   <content type="html">&lt;p&gt;오늘 하루 공부한 내용과 느낀점을 남기는 공간&lt;/p&gt;

</content>
 </entry>
 

</feed>
